# -*- coding: utf-8 -*-
"""HFTtask1

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1J1IRwvWurAthaIRwXs6BwN7GFVdtqa_e
"""

import numpy as np
import pandas as pd
import matplotlib.pyplot as plt
plt.rcParams["figure.figsize"] = (20, 5)

btcdata = pd.read_csv('trades_btc.csv', delimiter=',')

ethdata = pd.read_csv('trades_eth.csv', delimiter=',')

"""**BTC Price**"""

y = btcdata['price']
x = [i for i in range (len(y))]
plt.ylim(19800, 20700)
plt.plot(x,y)

"""**ETH Price**"""

y = ethdata['price']
x = [i for i in range (len(y))]
plt.ylim(1040, 1075)

plt.plot(x,y)

btclobdata = pd.read_csv('lobs_btc.csv', delimiter=',', skipinitialspace = True)

"""
**BTC best ask - orange; best bid - blue**
(здесь есть яркий единичный момент с большим спредом)"""

y1 = btclobdata['btcusdt:Binance:LinearPerpetual_ask_price_0']
y2 = btclobdata['btcusdt:Binance:LinearPerpetual_bid_price_0']
x = [i for i in range (len(y1))]
plt.ylim(19850, 20550)

plt.plot(x,y1, linewidth = 1.2)
plt.plot(x,y2,linewidth = 0.5)

ethlobdata = pd.read_csv('lobs_eth.csv', delimiter=',', skipinitialspace = True)

"""**ETH best ask - orange; best bid - blue**
(здесь довольно занятно,что в самом начале бест аск сильно хаотичнее себя ведёт чем бест бид)
"""

y1 = ethlobdata['ethusdt:Binance:LinearPerpetual_ask_price_0']
y2 = ethlobdata['ethusdt:Binance:LinearPerpetual_bid_price_0']
x = [i for i in range (len(y1))]
plt.ylim(1044, 1068)

plt.plot(x,y1,linewidth = 1.2)
plt.plot(x,y2,linewidth = 0.5)

print("mean size of btc trades =", btcdata["size"].mean())
print("mean size of eth trades =", ethdata["size"].mean())

print("median size of btc trades =", btcdata["size"].median())
print("median size of eth trades =", ethdata["size"].median())

print("dispersion of btc trades =", btcdata["size"].var())
print("dispersion of eth trades =", ethdata["size"].var())

print("0.05 quantile of btc trades =", pd.Series(btcdata["size"]).quantile(q=0.05))
print("0.05 quantile of eth trades =", pd.Series(ethdata["size"]).quantile(q=0.05))
print("0.95 quantile of btc trades =", pd.Series(btcdata["size"]).quantile(q=0.95))
print("0.95 quantile of eth trades =", pd.Series(ethdata["size"]).quantile(q=0.95))

"""**Trades sizes for BTC** """

btcdata['size'].hist(bins = 10000)
plt.xlim(0, 1)

"""**Trades sizes for ETH**"""

ethdata['size'].hist(bins = 10000)
plt.xlim(0, 15)

"""**Total volume of top 5 BTC ask levels**"""

btcvolask=[]
for i in range (len(btclobdata['btcusdt:Binance:LinearPerpetual_ask_vol_0'])):
  a = btclobdata['btcusdt:Binance:LinearPerpetual_ask_vol_0'][i] + btclobdata['btcusdt:Binance:LinearPerpetual_ask_vol_1'][i] + btclobdata['btcusdt:Binance:LinearPerpetual_ask_vol_2'][i] + btclobdata['btcusdt:Binance:LinearPerpetual_ask_vol_3'][i] + btclobdata['btcusdt:Binance:LinearPerpetual_ask_vol_4'][i]
  btcvolask.append(a)
btcvolask5 = pd.Series(btcvolask)
btcvolask5.hist(bins = 10000)
plt.xlim(0, 40)

"""
**Total volume of top 5 BTC bid levels**
"""

btcvolbid=[]
for i in range (len(btclobdata['btcusdt:Binance:LinearPerpetual_bid_vol_0'])):
  a = btclobdata['btcusdt:Binance:LinearPerpetual_bid_vol_0'][i] + btclobdata['btcusdt:Binance:LinearPerpetual_bid_vol_1'][i] + btclobdata['btcusdt:Binance:LinearPerpetual_bid_vol_2'][i] + btclobdata['btcusdt:Binance:LinearPerpetual_bid_vol_3'][i] + btclobdata['btcusdt:Binance:LinearPerpetual_bid_vol_4'][i]
  btcvolbid.append(a)
btcvolbid5 = pd.Series(btcvolbid)
btcvolbid5.hist(bins = 10000)
plt.xlim(0, 40)

"""
**Total volume of top 5 ETH ask levels**

"""

ethvolask=[]
for i in range (len(ethlobdata['ethusdt:Binance:LinearPerpetual_ask_vol_0'])):
  a = ethlobdata['ethusdt:Binance:LinearPerpetual_ask_vol_0'][i] + ethlobdata['ethusdt:Binance:LinearPerpetual_ask_vol_1'][i] + ethlobdata['ethusdt:Binance:LinearPerpetual_ask_vol_2'][i] + ethlobdata['ethusdt:Binance:LinearPerpetual_ask_vol_3'][i] + ethlobdata['ethusdt:Binance:LinearPerpetual_ask_vol_4'][i]
  ethvolask.append(a)
ethvolask5 = pd.Series(ethvolask)
ethvolask5.hist(bins = 10000)
plt.xlim(0, 300)

"""
**Total volume of top 5 ETH bid levels**

"""

ethvolbid=[]
for i in range (len(ethlobdata['ethusdt:Binance:LinearPerpetual_bid_vol_0'])):
  a = ethlobdata['ethusdt:Binance:LinearPerpetual_bid_vol_0'][i] + ethlobdata['ethusdt:Binance:LinearPerpetual_bid_vol_1'][i] + ethlobdata['ethusdt:Binance:LinearPerpetual_bid_vol_2'][i] + ethlobdata['ethusdt:Binance:LinearPerpetual_bid_vol_3'][i] + ethlobdata['ethusdt:Binance:LinearPerpetual_bid_vol_4'][i]
  ethvolbid.append(a)
ethvolbid5 = pd.Series(ethvolbid)
ethvolbid5.hist(bins = 10000)
plt.xlim(0, 300)

"""**Merge for BTC**"""

del btcdata['receive_ts']
del btclobdata['receive_ts']

btcdatamerged = btcdata.merge(btclobdata,how='outer').dropna()

"""**best price delta - trade size correlation for BTC ask**"""

allaskprices=[]
deltapriceask=[]
for i in range(len(btcdata['price'])):
  if btcdata['aggro_side'][i] == 'ASK':
    allaskprices.append(btcdata['price'][i])


for i in range(1,len(allaskprices)):
  deltapriceask.append(allaskprices[i]-allaskprices[i-1])

allasksizes=[]
for i in range(len(btcdata['price'])-2):
  if btcdata['aggro_side'][i] == 'ASK':
    allasksizes.append(btcdata['size'][i])

x = np.array(allasksizes)
y = np.array(deltapriceask)
plt.scatter(x, y, s=0.1)
plt.ylim(-100, 100)
plt.xlim(-1, 60)

"""**best price delta - trade size correlation for BTC bid**"""

allbidprices=[]
deltapricebid=[]
for i in range(len(btcdata['price'])):
  if btcdata['aggro_side'][i] == 'BID':
    allbidprices.append(btcdata['price'][i])


for i in range(1,len(allbidprices)):
  deltapricebid.append(allbidprices[i]-allbidprices[i-1])

allbidsizes=[]
for i in range(len(btcdata['price'])-9):
  if btcdata['aggro_side'][i] == 'BID':
    allbidsizes.append(btcdata['size'][i])

x = np.array(allbidsizes)
y = np.array(deltapricebid)
plt.scatter(x, y, s=0.1)
plt.ylim(-100, 100)
plt.xlim(-1, 60)

"""**Merge for ETH**"""

del ethdata['receive_ts']
del ethlobdata['receive_ts']

ethdatamerged = ethdata.merge(ethlobdata,how='outer').dropna()

"""**best price delta - trade size correlation for ETH ask**"""

ethallaskprices=[]
ethdeltapriceask=[]
for i in range(len(ethdata['price'])):
  if ethdata['aggro_side'][i] == 'ASK':
    ethallaskprices.append(ethdata['price'][i])


for i in range(1,len(ethallaskprices)):
  ethdeltapriceask.append(ethallaskprices[i]-ethallaskprices[i-1])

ethallasksizes=[]
for i in range(len(ethdata['price'])-1):
  if ethdata['aggro_side'][i] == 'ASK':
    ethallasksizes.append(ethdata['size'][i])

x = np.array(ethallasksizes)
y = np.array(ethdeltapriceask)
plt.scatter(x, y, s=0.1)
plt.ylim(-2, 2)
plt.xlim(-1, 60)

"""**best price delta - trade size correlation for ETH bid**"""

ethallbidprices=[]
ethdeltapricebid=[]
for i in range(len(ethdata['price'])):
  if ethdata['aggro_side'][i] == 'ASK':
    ethallbidprices.append(ethdata['price'][i])


for i in range(1,len(ethallbidprices)):
  ethdeltapricebid.append(ethallbidprices[i]-ethallbidprices[i-1])

ethallbidsizes=[]
for i in range(len(ethdata['price'])-1):
  if ethdata['aggro_side'][i] == 'ASK':
    ethallbidsizes.append(ethdata['size'][i])

x = np.array(ethallbidsizes)
y = np.array(ethdeltapricebid)
plt.scatter(x, y, s=0.1)
plt.ylim(-2, 2)
plt.xlim(-1, 60)
